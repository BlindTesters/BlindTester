const crypto = require('crypto');

describe('blindtester-crypto.pbkdf2Sync', () => {
    test('crypto.pbkdf2Sync("seg-2023","salt0",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[101.0,161.0,8.0,172.0,123.0,228.0,177.0,148.0,250.0,162.0,40.0,83.0,37.0,141.0,13.0,120.0,181.0,43.0,56.0,18.0,240.0,227.0,86.0,245.0,122.0,173.0,68.0,126.0,156.0,39.0,54.0,165.0,29.0,82.0,14.0,183.0,140.0,164.0,131.0,239.0,6.0,242.0,134.0,100.0,164.0,19.0,195.0,5.0,63.0,24.0,148.0,129.0,28.0,37.0,129.0,221.0,194.0,123.0,252.0,126.0,92.0,49.0,208.0,170.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt0",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[101.0,161.0,8.0,172.0,123.0,228.0,177.0,148.0,250.0,162.0,40.0,83.0,37.0,141.0,13.0,120.0,181.0,43.0,56.0,18.0,240.0,227.0,86.0,245.0,122.0,173.0,68.0,126.0,156.0,39.0,54.0,165.0,29.0,82.0,14.0,183.0,140.0,164.0,131.0,239.0,6.0,242.0,134.0,100.0,164.0,19.0,195.0,5.0,63.0,24.0,148.0,129.0,28.0,37.0,129.0,221.0,194.0,123.0,252.0,126.0,92.0,49.0,208.0,170.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt1",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[240.0,116.0,132.0,55.0,74.0,225.0,243.0,252.0,186.0,190.0,90.0,32.0,117.0,28.0,18.0,3.0,87.0,8.0,157.0,26.0,187.0,43.0,149.0,121.0,139.0,134.0,46.0,43.0,142.0,58.0,151.0,208.0,205.0,185.0,245.0,149.0,193.0,150.0,5.0,94.0,170.0,114.0,23.0,198.0,230.0,181.0,108.0,201.0,112.0,132.0,24.0,84.0,142.0,75.0,76.0,177.0,77.0,248.0,171.0,109.0,220.0,85.0,141.0,207.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt1",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[240.0,116.0,132.0,55.0,74.0,225.0,243.0,252.0,186.0,190.0,90.0,32.0,117.0,28.0,18.0,3.0,87.0,8.0,157.0,26.0,187.0,43.0,149.0,121.0,139.0,134.0,46.0,43.0,142.0,58.0,151.0,208.0,205.0,185.0,245.0,149.0,193.0,150.0,5.0,94.0,170.0,114.0,23.0,198.0,230.0,181.0,108.0,201.0,112.0,132.0,24.0,84.0,142.0,75.0,76.0,177.0,77.0,248.0,171.0,109.0,220.0,85.0,141.0,207.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt2",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[171.0,75.0,84.0,146.0,193.0,31.0,111.0,61.0,144.0,156.0,31.0,87.0,197.0,13.0,213.0,227.0,212.0,186.0,171.0,237.0,0.0,155.0,239.0,103.0,82.0,119.0,42.0,67.0,61.0,89.0,254.0,209.0,184.0,116.0,178.0,80.0,241.0,47.0,54.0,55.0,14.0,38.0,114.0,121.0,200.0,45.0,240.0,120.0,188.0,251.0,97.0,229.0,231.0,220.0,203.0,36.0,225.0,220.0,68.0,172.0,139.0,200.0,169.0,220.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt2",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[171.0,75.0,84.0,146.0,193.0,31.0,111.0,61.0,144.0,156.0,31.0,87.0,197.0,13.0,213.0,227.0,212.0,186.0,171.0,237.0,0.0,155.0,239.0,103.0,82.0,119.0,42.0,67.0,61.0,89.0,254.0,209.0,184.0,116.0,178.0,80.0,241.0,47.0,54.0,55.0,14.0,38.0,114.0,121.0,200.0,45.0,240.0,120.0,188.0,251.0,97.0,229.0,231.0,220.0,203.0,36.0,225.0,220.0,68.0,172.0,139.0,200.0,169.0,220.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt3",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[224.0,82.0,230.0,132.0,56.0,102.0,229.0,67.0,75.0,81.0,237.0,64.0,187.0,97.0,183.0,3.0,55.0,1.0,17.0,183.0,186.0,46.0,146.0,20.0,73.0,244.0,17.0,59.0,199.0,83.0,117.0,58.0,72.0,29.0,97.0,214.0,126.0,245.0,228.0,222.0,9.0,46.0,166.0,32.0,10.0,250.0,182.0,65.0,175.0,209.0,164.0,28.0,95.0,219.0,94.0,186.0,247.0,162.0,105.0,0.0,228.0,67.0,48.0,224.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt3",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[224.0,82.0,230.0,132.0,56.0,102.0,229.0,67.0,75.0,81.0,237.0,64.0,187.0,97.0,183.0,3.0,55.0,1.0,17.0,183.0,186.0,46.0,146.0,20.0,73.0,244.0,17.0,59.0,199.0,83.0,117.0,58.0,72.0,29.0,97.0,214.0,126.0,245.0,228.0,222.0,9.0,46.0,166.0,32.0,10.0,250.0,182.0,65.0,175.0,209.0,164.0,28.0,95.0,219.0,94.0,186.0,247.0,162.0,105.0,0.0,228.0,67.0,48.0,224.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt4",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[176.0,176.0,17.0,22.0,137.0,182.0,241.0,166.0,197.0,110.0,176.0,34.0,126.0,120.0,109.0,115.0,27.0,28.0,233.0,210.0,219.0,191.0,143.0,151.0,199.0,197.0,177.0,128.0,145.0,87.0,184.0,80.0,125.0,246.0,219.0,213.0,70.0,176.0,84.0,245.0,163.0,118.0,86.0,21.0,80.0,254.0,36.0,90.0,200.0,74.0,177.0,59.0,119.0,121.0,171.0,74.0,134.0,4.0,248.0,201.0,142.0,166.0,155.0,150.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt4",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[176.0,176.0,17.0,22.0,137.0,182.0,241.0,166.0,197.0,110.0,176.0,34.0,126.0,120.0,109.0,115.0,27.0,28.0,233.0,210.0,219.0,191.0,143.0,151.0,199.0,197.0,177.0,128.0,145.0,87.0,184.0,80.0,125.0,246.0,219.0,213.0,70.0,176.0,84.0,245.0,163.0,118.0,86.0,21.0,80.0,254.0,36.0,90.0,200.0,74.0,177.0,59.0,119.0,121.0,171.0,74.0,134.0,4.0,248.0,201.0,142.0,166.0,155.0,150.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt5",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[58.0,116.0,84.0,200.0,15.0,42.0,171.0,186.0,26.0,192.0,9.0,134.0,254.0,157.0,201.0,38.0,153.0,219.0,187.0,235.0,206.0,40.0,18.0,247.0,31.0,29.0,48.0,162.0,123.0,188.0,13.0,164.0,28.0,133.0,101.0,85.0,78.0,13.0,19.0,59.0,46.0,48.0,188.0,232.0,215.0,149.0,233.0,228.0,118.0,50.0,170.0,11.0,103.0,12.0,146.0,183.0,40.0,28.0,98.0,180.0,92.0,229.0,249.0,116.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt5",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[58.0,116.0,84.0,200.0,15.0,42.0,171.0,186.0,26.0,192.0,9.0,134.0,254.0,157.0,201.0,38.0,153.0,219.0,187.0,235.0,206.0,40.0,18.0,247.0,31.0,29.0,48.0,162.0,123.0,188.0,13.0,164.0,28.0,133.0,101.0,85.0,78.0,13.0,19.0,59.0,46.0,48.0,188.0,232.0,215.0,149.0,233.0,228.0,118.0,50.0,170.0,11.0,103.0,12.0,146.0,183.0,40.0,28.0,98.0,180.0,92.0,229.0,249.0,116.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt6",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[230.0,229.0,28.0,226.0,45.0,178.0,189.0,165.0,146.0,123.0,88.0,246.0,20.0,166.0,109.0,25.0,29.0,70.0,47.0,175.0,122.0,152.0,98.0,79.0,151.0,86.0,58.0,188.0,169.0,198.0,249.0,9.0,16.0,188.0,188.0,109.0,9.0,29.0,30.0,151.0,223.0,28.0,157.0,9.0,55.0,161.0,82.0,78.0,242.0,251.0,207.0,61.0,48.0,43.0,178.0,101.0,133.0,109.0,123.0,227.0,101.0,111.0,119.0,9.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt6",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[230.0,229.0,28.0,226.0,45.0,178.0,189.0,165.0,146.0,123.0,88.0,246.0,20.0,166.0,109.0,25.0,29.0,70.0,47.0,175.0,122.0,152.0,98.0,79.0,151.0,86.0,58.0,188.0,169.0,198.0,249.0,9.0,16.0,188.0,188.0,109.0,9.0,29.0,30.0,151.0,223.0,28.0,157.0,9.0,55.0,161.0,82.0,78.0,242.0,251.0,207.0,61.0,48.0,43.0,178.0,101.0,133.0,109.0,123.0,227.0,101.0,111.0,119.0,9.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt7",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[55.0,21.0,102.0,207.0,180.0,151.0,197.0,169.0,236.0,123.0,187.0,89.0,95.0,223.0,107.0,73.0,155.0,158.0,109.0,187.0,82.0,57.0,122.0,148.0,99.0,150.0,71.0,203.0,202.0,158.0,32.0,244.0,56.0,103.0,140.0,102.0,115.0,37.0,82.0,104.0,216.0,166.0,58.0,134.0,107.0,114.0,212.0,76.0,253.0,126.0,168.0,116.0,106.0,211.0,79.0,49.0,245.0,136.0,99.0,186.0,155.0,210.0,106.0,121.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt7",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[55.0,21.0,102.0,207.0,180.0,151.0,197.0,169.0,236.0,123.0,187.0,89.0,95.0,223.0,107.0,73.0,155.0,158.0,109.0,187.0,82.0,57.0,122.0,148.0,99.0,150.0,71.0,203.0,202.0,158.0,32.0,244.0,56.0,103.0,140.0,102.0,115.0,37.0,82.0,104.0,216.0,166.0,58.0,134.0,107.0,114.0,212.0,76.0,253.0,126.0,168.0,116.0,106.0,211.0,79.0,49.0,245.0,136.0,99.0,186.0,155.0,210.0,106.0,121.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt8",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[175.0,249.0,131.0,126.0,38.0,166.0,0.0,59.0,229.0,154.0,174.0,0.0,99.0,179.0,200.0,189.0,83.0,108.0,48.0,229.0,126.0,254.0,59.0,163.0,186.0,205.0,242.0,5.0,163.0,207.0,1.0,124.0,19.0,181.0,182.0,0.0,143.0,167.0,114.0,28.0,244.0,16.0,248.0,190.0,8.0,6.0,210.0,81.0,186.0,93.0,200.0,26.0,111.0,193.0,225.0,6.0,204.0,147.0,188.0,132.0,136.0,202.0,118.0,172.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt8",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[175.0,249.0,131.0,126.0,38.0,166.0,0.0,59.0,229.0,154.0,174.0,0.0,99.0,179.0,200.0,189.0,83.0,108.0,48.0,229.0,126.0,254.0,59.0,163.0,186.0,205.0,242.0,5.0,163.0,207.0,1.0,124.0,19.0,181.0,182.0,0.0,143.0,167.0,114.0,28.0,244.0,16.0,248.0,190.0,8.0,6.0,210.0,81.0,186.0,93.0,200.0,26.0,111.0,193.0,225.0,6.0,204.0,147.0,188.0,132.0,136.0,202.0,118.0,172.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt9",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[205.0,87.0,181.0,208.0,169.0,65.0,11.0,31.0,135.0,104.0,54.0,158.0,200.0,129.0,140.0,163.0,113.0,72.0,56.0,56.0,229.0,12.0,91.0,245.0,50.0,19.0,78.0,169.0,104.0,127.0,90.0,80.0,233.0,3.0,245.0,13.0,31.0,48.0,249.0,32.0,224.0,235.0,135.0,60.0,165.0,183.0,62.0,131.0,202.0,207.0,107.0,67.0,5.0,121.0,164.0,160.0,102.0,235.0,96.0,57.0,0.0,101.0,118.0,90.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt9",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[205.0,87.0,181.0,208.0,169.0,65.0,11.0,31.0,135.0,104.0,54.0,158.0,200.0,129.0,140.0,163.0,113.0,72.0,56.0,56.0,229.0,12.0,91.0,245.0,50.0,19.0,78.0,169.0,104.0,127.0,90.0,80.0,233.0,3.0,245.0,13.0,31.0,48.0,249.0,32.0,224.0,235.0,135.0,60.0,165.0,183.0,62.0,131.0,202.0,207.0,107.0,67.0,5.0,121.0,164.0,160.0,102.0,235.0,96.0,57.0,0.0,101.0,118.0,90.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt10",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[172.0,48.0,181.0,80.0,57.0,137.0,147.0,74.0,106.0,137.0,193.0,102.0,215.0,209.0,40.0,159.0,228.0,255.0,185.0,85.0,222.0,194.0,75.0,155.0,106.0,0.0,207.0,210.0,123.0,14.0,186.0,176.0,47.0,213.0,76.0,128.0,242.0,71.0,213.0,8.0,126.0,103.0,28.0,27.0,22.0,185.0,205.0,149.0,141.0,46.0,98.0,87.0,214.0,105.0,70.0,18.0,144.0,46.0,155.0,33.0,93.0,158.0,156.0,12.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt10",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[172.0,48.0,181.0,80.0,57.0,137.0,147.0,74.0,106.0,137.0,193.0,102.0,215.0,209.0,40.0,159.0,228.0,255.0,185.0,85.0,222.0,194.0,75.0,155.0,106.0,0.0,207.0,210.0,123.0,14.0,186.0,176.0,47.0,213.0,76.0,128.0,242.0,71.0,213.0,8.0,126.0,103.0,28.0,27.0,22.0,185.0,205.0,149.0,141.0,46.0,98.0,87.0,214.0,105.0,70.0,18.0,144.0,46.0,155.0,33.0,93.0,158.0,156.0,12.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt11",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[198.0,166.0,245.0,234.0,169.0,255.0,178.0,89.0,147.0,171.0,8.0,196.0,35.0,243.0,52.0,201.0,73.0,81.0,26.0,207.0,11.0,227.0,103.0,110.0,176.0,149.0,218.0,226.0,252.0,214.0,79.0,49.0,27.0,71.0,90.0,27.0,104.0,109.0,235.0,50.0,247.0,4.0,54.0,210.0,131.0,22.0,124.0,95.0,254.0,238.0,216.0,22.0,19.0,247.0,96.0,83.0,210.0,107.0,150.0,82.0,87.0,152.0,105.0,93.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt11",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[198.0,166.0,245.0,234.0,169.0,255.0,178.0,89.0,147.0,171.0,8.0,196.0,35.0,243.0,52.0,201.0,73.0,81.0,26.0,207.0,11.0,227.0,103.0,110.0,176.0,149.0,218.0,226.0,252.0,214.0,79.0,49.0,27.0,71.0,90.0,27.0,104.0,109.0,235.0,50.0,247.0,4.0,54.0,210.0,131.0,22.0,124.0,95.0,254.0,238.0,216.0,22.0,19.0,247.0,96.0,83.0,210.0,107.0,150.0,82.0,87.0,152.0,105.0,93.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt12",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[167.0,54.0,10.0,248.0,159.0,253.0,94.0,62.0,178.0,125.0,164.0,13.0,183.0,139.0,151.0,229.0,33.0,101.0,29.0,44.0,138.0,32.0,245.0,217.0,175.0,182.0,240.0,175.0,96.0,227.0,106.0,231.0,85.0,229.0,234.0,72.0,0.0,44.0,153.0,10.0,14.0,224.0,149.0,58.0,231.0,131.0,215.0,216.0,64.0,24.0,3.0,118.0,173.0,16.0,7.0,99.0,6.0,144.0,21.0,143.0,51.0,44.0,121.0,163.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt12",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[167.0,54.0,10.0,248.0,159.0,253.0,94.0,62.0,178.0,125.0,164.0,13.0,183.0,139.0,151.0,229.0,33.0,101.0,29.0,44.0,138.0,32.0,245.0,217.0,175.0,182.0,240.0,175.0,96.0,227.0,106.0,231.0,85.0,229.0,234.0,72.0,0.0,44.0,153.0,10.0,14.0,224.0,149.0,58.0,231.0,131.0,215.0,216.0,64.0,24.0,3.0,118.0,173.0,16.0,7.0,99.0,6.0,144.0,21.0,143.0,51.0,44.0,121.0,163.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt13",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[249.0,0.0,241.0,139.0,121.0,184.0,231.0,106.0,203.0,21.0,163.0,25.0,234.0,217.0,19.0,28.0,255.0,97.0,165.0,163.0,230.0,41.0,30.0,241.0,7.0,20.0,88.0,94.0,16.0,205.0,248.0,179.0,43.0,121.0,236.0,200.0,205.0,55.0,72.0,3.0,169.0,14.0,83.0,128.0,146.0,131.0,183.0,205.0,160.0,155.0,84.0,181.0,40.0,198.0,26.0,33.0,177.0,86.0,230.0,115.0,100.0,196.0,18.0,158.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt13",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[249.0,0.0,241.0,139.0,121.0,184.0,231.0,106.0,203.0,21.0,163.0,25.0,234.0,217.0,19.0,28.0,255.0,97.0,165.0,163.0,230.0,41.0,30.0,241.0,7.0,20.0,88.0,94.0,16.0,205.0,248.0,179.0,43.0,121.0,236.0,200.0,205.0,55.0,72.0,3.0,169.0,14.0,83.0,128.0,146.0,131.0,183.0,205.0,160.0,155.0,84.0,181.0,40.0,198.0,26.0,33.0,177.0,86.0,230.0,115.0,100.0,196.0,18.0,158.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt14",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[37.0,9.0,38.0,138.0,43.0,81.0,130.0,20.0,228.0,240.0,105.0,64.0,173.0,167.0,31.0,28.0,24.0,153.0,255.0,234.0,119.0,101.0,2.0,205.0,160.0,253.0,238.0,70.0,177.0,94.0,89.0,241.0,131.0,31.0,137.0,18.0,39.0,147.0,106.0,14.0,128.0,37.0,89.0,165.0,214.0,47.0,244.0,219.0,17.0,112.0,170.0,3.0,63.0,30.0,101.0,64.0,102.0,186.0,20.0,147.0,38.0,249.0,224.0,163.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt14",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[37.0,9.0,38.0,138.0,43.0,81.0,130.0,20.0,228.0,240.0,105.0,64.0,173.0,167.0,31.0,28.0,24.0,153.0,255.0,234.0,119.0,101.0,2.0,205.0,160.0,253.0,238.0,70.0,177.0,94.0,89.0,241.0,131.0,31.0,137.0,18.0,39.0,147.0,106.0,14.0,128.0,37.0,89.0,165.0,214.0,47.0,244.0,219.0,17.0,112.0,170.0,3.0,63.0,30.0,101.0,64.0,102.0,186.0,20.0,147.0,38.0,249.0,224.0,163.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt15",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[88.0,12.0,2.0,39.0,211.0,16.0,248.0,117.0,239.0,208.0,196.0,184.0,253.0,136.0,20.0,215.0,36.0,52.0,191.0,176.0,168.0,178.0,53.0,234.0,123.0,21.0,122.0,95.0,100.0,123.0,94.0,118.0,228.0,215.0,115.0,66.0,118.0,10.0,121.0,161.0,96.0,222.0,89.0,147.0,9.0,182.0,13.0,222.0,92.0,143.0,133.0,240.0,12.0,81.0,104.0,64.0,253.0,133.0,244.0,227.0,215.0,211.0,46.0,1.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt15",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[88.0,12.0,2.0,39.0,211.0,16.0,248.0,117.0,239.0,208.0,196.0,184.0,253.0,136.0,20.0,215.0,36.0,52.0,191.0,176.0,168.0,178.0,53.0,234.0,123.0,21.0,122.0,95.0,100.0,123.0,94.0,118.0,228.0,215.0,115.0,66.0,118.0,10.0,121.0,161.0,96.0,222.0,89.0,147.0,9.0,182.0,13.0,222.0,92.0,143.0,133.0,240.0,12.0,81.0,104.0,64.0,253.0,133.0,244.0,227.0,215.0,211.0,46.0,1.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt16",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[10.0,233.0,4.0,17.0,98.0,33.0,60.0,86.0,108.0,17.0,34.0,88.0,65.0,119.0,44.0,48.0,51.0,13.0,90.0,138.0,123.0,120.0,166.0,240.0,95.0,79.0,236.0,100.0,188.0,65.0,233.0,212.0,196.0,205.0,88.0,208.0,185.0,207.0,83.0,222.0,188.0,14.0,44.0,230.0,241.0,1.0,8.0,166.0,33.0,236.0,62.0,234.0,131.0,234.0,165.0,207.0,26.0,142.0,3.0,9.0,31.0,120.0,106.0,141.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt16",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[10.0,233.0,4.0,17.0,98.0,33.0,60.0,86.0,108.0,17.0,34.0,88.0,65.0,119.0,44.0,48.0,51.0,13.0,90.0,138.0,123.0,120.0,166.0,240.0,95.0,79.0,236.0,100.0,188.0,65.0,233.0,212.0,196.0,205.0,88.0,208.0,185.0,207.0,83.0,222.0,188.0,14.0,44.0,230.0,241.0,1.0,8.0,166.0,33.0,236.0,62.0,234.0,131.0,234.0,165.0,207.0,26.0,142.0,3.0,9.0,31.0,120.0,106.0,141.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt17",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[224.0,24.0,237.0,45.0,115.0,73.0,12.0,70.0,59.0,155.0,85.0,29.0,134.0,132.0,76.0,144.0,81.0,62.0,255.0,140.0,95.0,87.0,163.0,225.0,102.0,178.0,31.0,159.0,41.0,158.0,231.0,225.0,183.0,216.0,89.0,44.0,79.0,241.0,214.0,127.0,245.0,203.0,180.0,98.0,163.0,15.0,114.0,185.0,18.0,157.0,178.0,117.0,112.0,233.0,53.0,242.0,240.0,32.0,155.0,151.0,4.0,87.0,116.0,50.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt17",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[224.0,24.0,237.0,45.0,115.0,73.0,12.0,70.0,59.0,155.0,85.0,29.0,134.0,132.0,76.0,144.0,81.0,62.0,255.0,140.0,95.0,87.0,163.0,225.0,102.0,178.0,31.0,159.0,41.0,158.0,231.0,225.0,183.0,216.0,89.0,44.0,79.0,241.0,214.0,127.0,245.0,203.0,180.0,98.0,163.0,15.0,114.0,185.0,18.0,157.0,178.0,117.0,112.0,233.0,53.0,242.0,240.0,32.0,155.0,151.0,4.0,87.0,116.0,50.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt18",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[2.0,32.0,133.0,204.0,182.0,28.0,69.0,158.0,208.0,6.0,83.0,118.0,230.0,104.0,69.0,208.0,98.0,63.0,78.0,212.0,230.0,237.0,19.0,227.0,200.0,101.0,21.0,26.0,8.0,5.0,20.0,220.0,23.0,225.0,47.0,148.0,127.0,139.0,48.0,73.0,41.0,181.0,54.0,213.0,105.0,188.0,38.0,196.0,227.0,18.0,199.0,69.0,251.0,134.0,60.0,87.0,231.0,16.0,236.0,136.0,94.0,37.0,116.0,58.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt18",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[2.0,32.0,133.0,204.0,182.0,28.0,69.0,158.0,208.0,6.0,83.0,118.0,230.0,104.0,69.0,208.0,98.0,63.0,78.0,212.0,230.0,237.0,19.0,227.0,200.0,101.0,21.0,26.0,8.0,5.0,20.0,220.0,23.0,225.0,47.0,148.0,127.0,139.0,48.0,73.0,41.0,181.0,54.0,213.0,105.0,188.0,38.0,196.0,227.0,18.0,199.0,69.0,251.0,134.0,60.0,87.0,231.0,16.0,236.0,136.0,94.0,37.0,116.0,58.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt19",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[151.0,16.0,16.0,165.0,146.0,144.0,88.0,10.0,224.0,206.0,199.0,82.0,136.0,125.0,184.0,57.0,85.0,216.0,116.0,181.0,3.0,125.0,163.0,163.0,231.0,77.0,245.0,91.0,88.0,32.0,182.0,181.0,188.0,109.0,73.0,139.0,253.0,90.0,219.0,225.0,205.0,68.0,170.0,204.0,137.0,59.0,255.0,177.0,85.0,135.0,44.0,86.0,6.0,199.0,154.0,203.0,26.0,234.0,192.0,179.0,4.0,160.0,219.0,23.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt19",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[151.0,16.0,16.0,165.0,146.0,144.0,88.0,10.0,224.0,206.0,199.0,82.0,136.0,125.0,184.0,57.0,85.0,216.0,116.0,181.0,3.0,125.0,163.0,163.0,231.0,77.0,245.0,91.0,88.0,32.0,182.0,181.0,188.0,109.0,73.0,139.0,253.0,90.0,219.0,225.0,205.0,68.0,170.0,204.0,137.0,59.0,255.0,177.0,85.0,135.0,44.0,86.0,6.0,199.0,154.0,203.0,26.0,234.0,192.0,179.0,4.0,160.0,219.0,23.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt20",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[47.0,7.0,241.0,177.0,134.0,15.0,39.0,179.0,224.0,189.0,246.0,75.0,105.0,236.0,22.0,131.0,170.0,126.0,58.0,167.0,124.0,103.0,109.0,69.0,128.0,41.0,114.0,17.0,52.0,150.0,26.0,123.0,56.0,145.0,178.0,58.0,56.0,51.0,169.0,176.0,208.0,241.0,0.0,12.0,184.0,43.0,72.0,21.0,51.0,219.0,184.0,200.0,122.0,190.0,244.0,55.0,14.0,106.0,209.0,63.0,84.0,99.0,99.0,138.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt20",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[47.0,7.0,241.0,177.0,134.0,15.0,39.0,179.0,224.0,189.0,246.0,75.0,105.0,236.0,22.0,131.0,170.0,126.0,58.0,167.0,124.0,103.0,109.0,69.0,128.0,41.0,114.0,17.0,52.0,150.0,26.0,123.0,56.0,145.0,178.0,58.0,56.0,51.0,169.0,176.0,208.0,241.0,0.0,12.0,184.0,43.0,72.0,21.0,51.0,219.0,184.0,200.0,122.0,190.0,244.0,55.0,14.0,106.0,209.0,63.0,84.0,99.0,99.0,138.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt21",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[61.0,1.0,46.0,123.0,27.0,242.0,248.0,91.0,25.0,106.0,42.0,245.0,197.0,70.0,17.0,224.0,8.0,224.0,130.0,148.0,142.0,31.0,79.0,118.0,159.0,86.0,229.0,193.0,225.0,97.0,62.0,168.0,68.0,224.0,115.0,217.0,35.0,45.0,18.0,160.0,207.0,140.0,85.0,81.0,248.0,213.0,150.0,55.0,217.0,252.0,108.0,30.0,182.0,27.0,19.0,169.0,246.0,20.0,41.0,67.0,220.0,114.0,32.0,100.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt21",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[61.0,1.0,46.0,123.0,27.0,242.0,248.0,91.0,25.0,106.0,42.0,245.0,197.0,70.0,17.0,224.0,8.0,224.0,130.0,148.0,142.0,31.0,79.0,118.0,159.0,86.0,229.0,193.0,225.0,97.0,62.0,168.0,68.0,224.0,115.0,217.0,35.0,45.0,18.0,160.0,207.0,140.0,85.0,81.0,248.0,213.0,150.0,55.0,217.0,252.0,108.0,30.0,182.0,27.0,19.0,169.0,246.0,20.0,41.0,67.0,220.0,114.0,32.0,100.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt22",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[70.0,47.0,142.0,129.0,249.0,58.0,138.0,18.0,212.0,32.0,91.0,182.0,170.0,9.0,124.0,50.0,119.0,196.0,240.0,205.0,16.0,223.0,122.0,128.0,28.0,30.0,191.0,177.0,120.0,223.0,231.0,171.0,73.0,229.0,240.0,229.0,6.0,207.0,231.0,147.0,12.0,176.0,228.0,108.0,191.0,188.0,76.0,247.0,68.0,9.0,76.0,147.0,63.0,192.0,84.0,188.0,212.0,32.0,239.0,144.0,5.0,171.0,114.0,133.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt22",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[70.0,47.0,142.0,129.0,249.0,58.0,138.0,18.0,212.0,32.0,91.0,182.0,170.0,9.0,124.0,50.0,119.0,196.0,240.0,205.0,16.0,223.0,122.0,128.0,28.0,30.0,191.0,177.0,120.0,223.0,231.0,171.0,73.0,229.0,240.0,229.0,6.0,207.0,231.0,147.0,12.0,176.0,228.0,108.0,191.0,188.0,76.0,247.0,68.0,9.0,76.0,147.0,63.0,192.0,84.0,188.0,212.0,32.0,239.0,144.0,5.0,171.0,114.0,133.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt23",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[100.0,8.0,146.0,191.0,66.0,233.0,14.0,117.0,237.0,11.0,52.0,195.0,216.0,255.0,245.0,153.0,199.0,238.0,30.0,141.0,35.0,166.0,39.0,119.0,48.0,34.0,42.0,234.0,216.0,16.0,79.0,8.0,202.0,50.0,80.0,201.0,123.0,163.0,122.0,56.0,235.0,35.0,162.0,9.0,172.0,207.0,10.0,124.0,105.0,165.0,148.0,62.0,85.0,52.0,113.0,232.0,106.0,95.0,3.0,253.0,128.0,254.0,110.0,135.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt23",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[100.0,8.0,146.0,191.0,66.0,233.0,14.0,117.0,237.0,11.0,52.0,195.0,216.0,255.0,245.0,153.0,199.0,238.0,30.0,141.0,35.0,166.0,39.0,119.0,48.0,34.0,42.0,234.0,216.0,16.0,79.0,8.0,202.0,50.0,80.0,201.0,123.0,163.0,122.0,56.0,235.0,35.0,162.0,9.0,172.0,207.0,10.0,124.0,105.0,165.0,148.0,62.0,85.0,52.0,113.0,232.0,106.0,95.0,3.0,253.0,128.0,254.0,110.0,135.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt24",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[99.0,114.0,71.0,210.0,50.0,119.0,146.0,40.0,17.0,200.0,208.0,79.0,59.0,239.0,55.0,20.0,218.0,125.0,217.0,103.0,187.0,111.0,162.0,67.0,53.0,35.0,57.0,33.0,78.0,94.0,161.0,214.0,203.0,189.0,54.0,17.0,235.0,88.0,77.0,24.0,36.0,52.0,227.0,124.0,9.0,176.0,219.0,10.0,57.0,212.0,185.0,210.0,179.0,202.0,30.0,54.0,91.0,205.0,4.0,163.0,168.0,39.0,14.0,3.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt24",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[99.0,114.0,71.0,210.0,50.0,119.0,146.0,40.0,17.0,200.0,208.0,79.0,59.0,239.0,55.0,20.0,218.0,125.0,217.0,103.0,187.0,111.0,162.0,67.0,53.0,35.0,57.0,33.0,78.0,94.0,161.0,214.0,203.0,189.0,54.0,17.0,235.0,88.0,77.0,24.0,36.0,52.0,227.0,124.0,9.0,176.0,219.0,10.0,57.0,212.0,185.0,210.0,179.0,202.0,30.0,54.0,91.0,205.0,4.0,163.0,168.0,39.0,14.0,3.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt25",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[2.0,43.0,48.0,25.0,245.0,242.0,1.0,223.0,177.0,196.0,12.0,217.0,126.0,129.0,191.0,196.0,121.0,14.0,35.0,254.0,245.0,212.0,5.0,44.0,221.0,252.0,6.0,50.0,52.0,42.0,7.0,203.0,134.0,81.0,49.0,238.0,31.0,111.0,16.0,33.0,135.0,33.0,216.0,161.0,175.0,4.0,157.0,202.0,219.0,4.0,50.0,106.0,46.0,202.0,56.0,168.0,236.0,170.0,205.0,96.0,22.0,214.0,253.0,174.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt25",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[2.0,43.0,48.0,25.0,245.0,242.0,1.0,223.0,177.0,196.0,12.0,217.0,126.0,129.0,191.0,196.0,121.0,14.0,35.0,254.0,245.0,212.0,5.0,44.0,221.0,252.0,6.0,50.0,52.0,42.0,7.0,203.0,134.0,81.0,49.0,238.0,31.0,111.0,16.0,33.0,135.0,33.0,216.0,161.0,175.0,4.0,157.0,202.0,219.0,4.0,50.0,106.0,46.0,202.0,56.0,168.0,236.0,170.0,205.0,96.0,22.0,214.0,253.0,174.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt26",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[172.0,38.0,48.0,64.0,105.0,45.0,53.0,114.0,208.0,113.0,63.0,178.0,98.0,186.0,96.0,20.0,169.0,102.0,218.0,80.0,108.0,201.0,5.0,88.0,86.0,13.0,190.0,245.0,221.0,180.0,171.0,10.0,75.0,67.0,16.0,28.0,151.0,38.0,215.0,164.0,17.0,88.0,166.0,49.0,170.0,68.0,26.0,250.0,200.0,213.0,29.0,170.0,248.0,253.0,68.0,59.0,203.0,245.0,114.0,237.0,217.0,224.0,193.0,179.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt26",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[172.0,38.0,48.0,64.0,105.0,45.0,53.0,114.0,208.0,113.0,63.0,178.0,98.0,186.0,96.0,20.0,169.0,102.0,218.0,80.0,108.0,201.0,5.0,88.0,86.0,13.0,190.0,245.0,221.0,180.0,171.0,10.0,75.0,67.0,16.0,28.0,151.0,38.0,215.0,164.0,17.0,88.0,166.0,49.0,170.0,68.0,26.0,250.0,200.0,213.0,29.0,170.0,248.0,253.0,68.0,59.0,203.0,245.0,114.0,237.0,217.0,224.0,193.0,179.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt27",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[221.0,235.0,223.0,230.0,140.0,210.0,85.0,255.0,19.0,72.0,89.0,125.0,28.0,31.0,50.0,227.0,92.0,76.0,67.0,28.0,226.0,188.0,50.0,1.0,231.0,105.0,36.0,189.0,12.0,196.0,31.0,234.0,189.0,120.0,185.0,53.0,245.0,100.0,3.0,202.0,140.0,239.0,42.0,200.0,240.0,157.0,0.0,202.0,164.0,23.0,169.0,252.0,217.0,208.0,93.0,133.0,77.0,124.0,65.0,215.0,35.0,18.0,124.0,102.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt27",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[221.0,235.0,223.0,230.0,140.0,210.0,85.0,255.0,19.0,72.0,89.0,125.0,28.0,31.0,50.0,227.0,92.0,76.0,67.0,28.0,226.0,188.0,50.0,1.0,231.0,105.0,36.0,189.0,12.0,196.0,31.0,234.0,189.0,120.0,185.0,53.0,245.0,100.0,3.0,202.0,140.0,239.0,42.0,200.0,240.0,157.0,0.0,202.0,164.0,23.0,169.0,252.0,217.0,208.0,93.0,133.0,77.0,124.0,65.0,215.0,35.0,18.0,124.0,102.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt28",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[12.0,208.0,108.0,76.0,76.0,50.0,32.0,216.0,201.0,125.0,159.0,191.0,60.0,170.0,172.0,64.0,72.0,255.0,44.0,139.0,124.0,120.0,22.0,20.0,182.0,9.0,167.0,164.0,76.0,123.0,49.0,59.0,224.0,151.0,142.0,69.0,72.0,107.0,238.0,162.0,220.0,145.0,68.0,201.0,96.0,101.0,109.0,49.0,123.0,123.0,183.0,190.0,11.0,244.0,111.0,33.0,141.0,94.0,148.0,69.0,112.0,91.0,102.0,95.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt28",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[12.0,208.0,108.0,76.0,76.0,50.0,32.0,216.0,201.0,125.0,159.0,191.0,60.0,170.0,172.0,64.0,72.0,255.0,44.0,139.0,124.0,120.0,22.0,20.0,182.0,9.0,167.0,164.0,76.0,123.0,49.0,59.0,224.0,151.0,142.0,69.0,72.0,107.0,238.0,162.0,220.0,145.0,68.0,201.0,96.0,101.0,109.0,49.0,123.0,123.0,183.0,190.0,11.0,244.0,111.0,33.0,141.0,94.0,148.0,69.0,112.0,91.0,102.0,95.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt29",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[1.0,215.0,132.0,23.0,251.0,136.0,57.0,49.0,227.0,133.0,251.0,141.0,51.0,170.0,121.0,99.0,69.0,139.0,147.0,138.0,109.0,243.0,152.0,235.0,168.0,107.0,130.0,88.0,192.0,128.0,229.0,211.0,187.0,119.0,242.0,39.0,47.0,190.0,28.0,88.0,4.0,126.0,136.0,65.0,170.0,21.0,16.0,7.0,222.0,17.0,152.0,95.0,42.0,232.0,150.0,76.0,142.0,42.0,168.0,75.0,10.0,38.0,158.0,51.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt29",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[1.0,215.0,132.0,23.0,251.0,136.0,57.0,49.0,227.0,133.0,251.0,141.0,51.0,170.0,121.0,99.0,69.0,139.0,147.0,138.0,109.0,243.0,152.0,235.0,168.0,107.0,130.0,88.0,192.0,128.0,229.0,211.0,187.0,119.0,242.0,39.0,47.0,190.0,28.0,88.0,4.0,126.0,136.0,65.0,170.0,21.0,16.0,7.0,222.0,17.0,152.0,95.0,42.0,232.0,150.0,76.0,142.0,42.0,168.0,75.0,10.0,38.0,158.0,51.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt30",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[102.0,10.0,52.0,177.0,112.0,102.0,210.0,190.0,31.0,182.0,236.0,87.0,70.0,1.0,248.0,199.0,46.0,214.0,230.0,136.0,152.0,28.0,121.0,42.0,178.0,123.0,159.0,228.0,32.0,166.0,253.0,102.0,164.0,207.0,128.0,200.0,169.0,118.0,146.0,123.0,8.0,111.0,85.0,137.0,36.0,102.0,88.0,82.0,27.0,29.0,106.0,14.0,185.0,51.0,127.0,8.0,243.0,18.0,102.0,145.0,183.0,90.0,230.0,105.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt30",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[102.0,10.0,52.0,177.0,112.0,102.0,210.0,190.0,31.0,182.0,236.0,87.0,70.0,1.0,248.0,199.0,46.0,214.0,230.0,136.0,152.0,28.0,121.0,42.0,178.0,123.0,159.0,228.0,32.0,166.0,253.0,102.0,164.0,207.0,128.0,200.0,169.0,118.0,146.0,123.0,8.0,111.0,85.0,137.0,36.0,102.0,88.0,82.0,27.0,29.0,106.0,14.0,185.0,51.0,127.0,8.0,243.0,18.0,102.0,145.0,183.0,90.0,230.0,105.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt31",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[7.0,175.0,103.0,115.0,181.0,12.0,133.0,255.0,192.0,161.0,1.0,46.0,139.0,168.0,70.0,130.0,242.0,71.0,134.0,242.0,195.0,129.0,93.0,228.0,159.0,121.0,183.0,47.0,219.0,24.0,117.0,140.0,40.0,233.0,148.0,27.0,93.0,243.0,22.0,191.0,230.0,144.0,54.0,101.0,238.0,105.0,56.0,35.0,48.0,69.0,134.0,118.0,252.0,1.0,128.0,247.0,238.0,77.0,43.0,53.0,174.0,247.0,36.0,31.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt31",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[7.0,175.0,103.0,115.0,181.0,12.0,133.0,255.0,192.0,161.0,1.0,46.0,139.0,168.0,70.0,130.0,242.0,71.0,134.0,242.0,195.0,129.0,93.0,228.0,159.0,121.0,183.0,47.0,219.0,24.0,117.0,140.0,40.0,233.0,148.0,27.0,93.0,243.0,22.0,191.0,230.0,144.0,54.0,101.0,238.0,105.0,56.0,35.0,48.0,69.0,134.0,118.0,252.0,1.0,128.0,247.0,238.0,77.0,43.0,53.0,174.0,247.0,36.0,31.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt32",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[151.0,73.0,229.0,161.0,25.0,124.0,139.0,113.0,162.0,175.0,185.0,6.0,117.0,95.0,168.0,136.0,249.0,93.0,113.0,249.0,52.0,172.0,204.0,206.0,112.0,46.0,143.0,120.0,113.0,169.0,149.0,53.0,71.0,64.0,73.0,25.0,244.0,189.0,69.0,248.0,253.0,9.0,82.0,157.0,135.0,75.0,7.0,210.0,75.0,159.0,69.0,215.0,159.0,111.0,178.0,43.0,217.0,43.0,1.0,221.0,119.0,159.0,67.0,171.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt32",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[151.0,73.0,229.0,161.0,25.0,124.0,139.0,113.0,162.0,175.0,185.0,6.0,117.0,95.0,168.0,136.0,249.0,93.0,113.0,249.0,52.0,172.0,204.0,206.0,112.0,46.0,143.0,120.0,113.0,169.0,149.0,53.0,71.0,64.0,73.0,25.0,244.0,189.0,69.0,248.0,253.0,9.0,82.0,157.0,135.0,75.0,7.0,210.0,75.0,159.0,69.0,215.0,159.0,111.0,178.0,43.0,217.0,43.0,1.0,221.0,119.0,159.0,67.0,171.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt33",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[102.0,252.0,40.0,102.0,55.0,179.0,143.0,115.0,190.0,67.0,115.0,181.0,1.0,40.0,166.0,63.0,235.0,209.0,106.0,80.0,55.0,92.0,191.0,180.0,122.0,80.0,138.0,225.0,249.0,111.0,55.0,42.0,26.0,178.0,4.0,115.0,44.0,21.0,232.0,167.0,241.0,225.0,167.0,22.0,17.0,106.0,222.0,110.0,73.0,116.0,94.0,86.0,163.0,74.0,176.0,239.0,126.0,54.0,102.0,29.0,104.0,152.0,47.0,23.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt33",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[102.0,252.0,40.0,102.0,55.0,179.0,143.0,115.0,190.0,67.0,115.0,181.0,1.0,40.0,166.0,63.0,235.0,209.0,106.0,80.0,55.0,92.0,191.0,180.0,122.0,80.0,138.0,225.0,249.0,111.0,55.0,42.0,26.0,178.0,4.0,115.0,44.0,21.0,232.0,167.0,241.0,225.0,167.0,22.0,17.0,106.0,222.0,110.0,73.0,116.0,94.0,86.0,163.0,74.0,176.0,239.0,126.0,54.0,102.0,29.0,104.0,152.0,47.0,23.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt34",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[165.0,199.0,201.0,228.0,229.0,89.0,189.0,144.0,226.0,106.0,162.0,76.0,200.0,202.0,46.0,141.0,151.0,30.0,162.0,250.0,195.0,60.0,240.0,163.0,240.0,247.0,122.0,179.0,167.0,184.0,51.0,185.0,211.0,36.0,139.0,86.0,135.0,96.0,18.0,252.0,85.0,247.0,169.0,226.0,72.0,194.0,43.0,248.0,134.0,247.0,170.0,49.0,29.0,215.0,75.0,138.0,10.0,254.0,4.0,160.0,237.0,86.0,83.0,102.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt34",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[165.0,199.0,201.0,228.0,229.0,89.0,189.0,144.0,226.0,106.0,162.0,76.0,200.0,202.0,46.0,141.0,151.0,30.0,162.0,250.0,195.0,60.0,240.0,163.0,240.0,247.0,122.0,179.0,167.0,184.0,51.0,185.0,211.0,36.0,139.0,86.0,135.0,96.0,18.0,252.0,85.0,247.0,169.0,226.0,72.0,194.0,43.0,248.0,134.0,247.0,170.0,49.0,29.0,215.0,75.0,138.0,10.0,254.0,4.0,160.0,237.0,86.0,83.0,102.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt35",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[9.0,30.0,168.0,16.0,28.0,51.0,11.0,250.0,227.0,55.0,18.0,0.0,217.0,125.0,159.0,35.0,69.0,177.0,206.0,5.0,105.0,141.0,209.0,135.0,141.0,44.0,34.0,184.0,205.0,156.0,146.0,73.0,139.0,43.0,93.0,155.0,233.0,141.0,14.0,87.0,93.0,65.0,93.0,37.0,165.0,20.0,155.0,104.0,194.0,7.0,190.0,85.0,216.0,155.0,25.0,143.0,166.0,230.0,17.0,251.0,214.0,155.0,29.0,77.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt35",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[9.0,30.0,168.0,16.0,28.0,51.0,11.0,250.0,227.0,55.0,18.0,0.0,217.0,125.0,159.0,35.0,69.0,177.0,206.0,5.0,105.0,141.0,209.0,135.0,141.0,44.0,34.0,184.0,205.0,156.0,146.0,73.0,139.0,43.0,93.0,155.0,233.0,141.0,14.0,87.0,93.0,65.0,93.0,37.0,165.0,20.0,155.0,104.0,194.0,7.0,190.0,85.0,216.0,155.0,25.0,143.0,166.0,230.0,17.0,251.0,214.0,155.0,29.0,77.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt36",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[36.0,17.0,80.0,150.0,3.0,48.0,249.0,73.0,44.0,5.0,113.0,193.0,22.0,134.0,94.0,157.0,56.0,26.0,228.0,150.0,136.0,22.0,248.0,185.0,8.0,220.0,72.0,154.0,68.0,160.0,79.0,31.0,59.0,247.0,116.0,199.0,39.0,181.0,224.0,8.0,153.0,37.0,11.0,137.0,151.0,4.0,26.0,157.0,57.0,60.0,82.0,24.0,28.0,202.0,35.0,19.0,122.0,238.0,10.0,144.0,89.0,247.0,124.0,183.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt36",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[36.0,17.0,80.0,150.0,3.0,48.0,249.0,73.0,44.0,5.0,113.0,193.0,22.0,134.0,94.0,157.0,56.0,26.0,228.0,150.0,136.0,22.0,248.0,185.0,8.0,220.0,72.0,154.0,68.0,160.0,79.0,31.0,59.0,247.0,116.0,199.0,39.0,181.0,224.0,8.0,153.0,37.0,11.0,137.0,151.0,4.0,26.0,157.0,57.0,60.0,82.0,24.0,28.0,202.0,35.0,19.0,122.0,238.0,10.0,144.0,89.0,247.0,124.0,183.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt37",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[18.0,111.0,96.0,140.0,194.0,108.0,26.0,217.0,215.0,89.0,221.0,93.0,140.0,199.0,2.0,21.0,192.0,105.0,213.0,115.0,201.0,226.0,75.0,177.0,56.0,137.0,153.0,215.0,3.0,235.0,177.0,41.0,157.0,189.0,189.0,134.0,204.0,68.0,61.0,158.0,41.0,201.0,206.0,1.0,158.0,92.0,45.0,184.0,1.0,144.0,93.0,50.0,123.0,190.0,241.0,173.0,166.0,135.0,237.0,137.0,32.0,9.0,244.0,132.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt37",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[18.0,111.0,96.0,140.0,194.0,108.0,26.0,217.0,215.0,89.0,221.0,93.0,140.0,199.0,2.0,21.0,192.0,105.0,213.0,115.0,201.0,226.0,75.0,177.0,56.0,137.0,153.0,215.0,3.0,235.0,177.0,41.0,157.0,189.0,189.0,134.0,204.0,68.0,61.0,158.0,41.0,201.0,206.0,1.0,158.0,92.0,45.0,184.0,1.0,144.0,93.0,50.0,123.0,190.0,241.0,173.0,166.0,135.0,237.0,137.0,32.0,9.0,244.0,132.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt38",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[174.0,102.0,122.0,194.0,130.0,83.0,233.0,193.0,192.0,26.0,10.0,160.0,6.0,44.0,28.0,154.0,68.0,172.0,103.0,154.0,29.0,247.0,214.0,172.0,217.0,160.0,96.0,225.0,86.0,13.0,193.0,248.0,194.0,120.0,0.0,60.0,86.0,96.0,44.0,162.0,107.0,207.0,63.0,47.0,196.0,41.0,70.0,129.0,52.0,22.0,138.0,207.0,30.0,61.0,246.0,205.0,154.0,104.0,58.0,170.0,11.0,156.0,46.0,195.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt38",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[174.0,102.0,122.0,194.0,130.0,83.0,233.0,193.0,192.0,26.0,10.0,160.0,6.0,44.0,28.0,154.0,68.0,172.0,103.0,154.0,29.0,247.0,214.0,172.0,217.0,160.0,96.0,225.0,86.0,13.0,193.0,248.0,194.0,120.0,0.0,60.0,86.0,96.0,44.0,162.0,107.0,207.0,63.0,47.0,196.0,41.0,70.0,129.0,52.0,22.0,138.0,207.0,30.0,61.0,246.0,205.0,154.0,104.0,58.0,170.0,11.0,156.0,46.0,195.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt39",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[126.0,52.0,89.0,24.0,103.0,220.0,168.0,121.0,221.0,241.0,232.0,5.0,42.0,115.0,4.0,187.0,0.0,31.0,225.0,114.0,148.0,142.0,121.0,42.0,12.0,18.0,154.0,150.0,105.0,71.0,79.0,183.0,55.0,150.0,12.0,189.0,250.0,210.0,10.0,221.0,252.0,205.0,137.0,66.0,180.0,56.0,169.0,227.0,75.0,42.0,125.0,98.0,220.0,153.0,50.0,178.0,229.0,54.0,124.0,36.0,113.0,227.0,42.0,184.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt39",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[126.0,52.0,89.0,24.0,103.0,220.0,168.0,121.0,221.0,241.0,232.0,5.0,42.0,115.0,4.0,187.0,0.0,31.0,225.0,114.0,148.0,142.0,121.0,42.0,12.0,18.0,154.0,150.0,105.0,71.0,79.0,183.0,55.0,150.0,12.0,189.0,250.0,210.0,10.0,221.0,252.0,205.0,137.0,66.0,180.0,56.0,169.0,227.0,75.0,42.0,125.0,98.0,220.0,153.0,50.0,178.0,229.0,54.0,124.0,36.0,113.0,227.0,42.0,184.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt40",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[13.0,38.0,211.0,68.0,96.0,23.0,192.0,114.0,177.0,82.0,124.0,64.0,226.0,204.0,28.0,144.0,233.0,180.0,206.0,23.0,83.0,106.0,53.0,158.0,215.0,209.0,173.0,173.0,37.0,67.0,146.0,3.0,191.0,55.0,131.0,167.0,141.0,250.0,239.0,10.0,255.0,85.0,49.0,58.0,3.0,187.0,246.0,82.0,146.0,139.0,32.0,39.0,47.0,173.0,69.0,0.0,41.0,218.0,91.0,102.0,88.0,225.0,210.0,151.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt40",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[13.0,38.0,211.0,68.0,96.0,23.0,192.0,114.0,177.0,82.0,124.0,64.0,226.0,204.0,28.0,144.0,233.0,180.0,206.0,23.0,83.0,106.0,53.0,158.0,215.0,209.0,173.0,173.0,37.0,67.0,146.0,3.0,191.0,55.0,131.0,167.0,141.0,250.0,239.0,10.0,255.0,85.0,49.0,58.0,3.0,187.0,246.0,82.0,146.0,139.0,32.0,39.0,47.0,173.0,69.0,0.0,41.0,218.0,91.0,102.0,88.0,225.0,210.0,151.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt41",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[156.0,200.0,218.0,98.0,155.0,3.0,165.0,111.0,239.0,24.0,112.0,221.0,199.0,54.0,59.0,83.0,83.0,147.0,18.0,74.0,96.0,175.0,122.0,142.0,203.0,228.0,122.0,106.0,236.0,165.0,135.0,102.0,22.0,30.0,174.0,100.0,151.0,161.0,143.0,151.0,240.0,89.0,220.0,157.0,64.0,243.0,97.0,212.0,199.0,30.0,210.0,254.0,183.0,171.0,154.0,232.0,59.0,131.0,17.0,163.0,139.0,131.0,240.0,122.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt41",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[156.0,200.0,218.0,98.0,155.0,3.0,165.0,111.0,239.0,24.0,112.0,221.0,199.0,54.0,59.0,83.0,83.0,147.0,18.0,74.0,96.0,175.0,122.0,142.0,203.0,228.0,122.0,106.0,236.0,165.0,135.0,102.0,22.0,30.0,174.0,100.0,151.0,161.0,143.0,151.0,240.0,89.0,220.0,157.0,64.0,243.0,97.0,212.0,199.0,30.0,210.0,254.0,183.0,171.0,154.0,232.0,59.0,131.0,17.0,163.0,139.0,131.0,240.0,122.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt42",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[39.0,65.0,253.0,6.0,88.0,195.0,150.0,75.0,31.0,61.0,229.0,168.0,152.0,219.0,217.0,48.0,63.0,234.0,188.0,109.0,93.0,209.0,9.0,252.0,7.0,195.0,88.0,15.0,127.0,221.0,140.0,78.0,242.0,158.0,179.0,174.0,232.0,30.0,154.0,41.0,24.0,180.0,152.0,125.0,214.0,156.0,60.0,247.0,82.0,155.0,4.0,52.0,44.0,162.0,168.0,122.0,88.0,119.0,159.0,133.0,141.0,116.0,198.0,93.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt42",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[39.0,65.0,253.0,6.0,88.0,195.0,150.0,75.0,31.0,61.0,229.0,168.0,152.0,219.0,217.0,48.0,63.0,234.0,188.0,109.0,93.0,209.0,9.0,252.0,7.0,195.0,88.0,15.0,127.0,221.0,140.0,78.0,242.0,158.0,179.0,174.0,232.0,30.0,154.0,41.0,24.0,180.0,152.0,125.0,214.0,156.0,60.0,247.0,82.0,155.0,4.0,52.0,44.0,162.0,168.0,122.0,88.0,119.0,159.0,133.0,141.0,116.0,198.0,93.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt43",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[23.0,43.0,48.0,69.0,43.0,20.0,107.0,120.0,43.0,152.0,208.0,157.0,179.0,67.0,203.0,161.0,136.0,138.0,78.0,211.0,255.0,152.0,247.0,207.0,172.0,7.0,166.0,165.0,108.0,141.0,35.0,66.0,87.0,16.0,29.0,1.0,65.0,233.0,66.0,184.0,100.0,158.0,49.0,169.0,231.0,115.0,236.0,95.0,53.0,65.0,238.0,70.0,229.0,73.0,203.0,153.0,232.0,201.0,60.0,234.0,184.0,180.0,161.0,119.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt43",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[23.0,43.0,48.0,69.0,43.0,20.0,107.0,120.0,43.0,152.0,208.0,157.0,179.0,67.0,203.0,161.0,136.0,138.0,78.0,211.0,255.0,152.0,247.0,207.0,172.0,7.0,166.0,165.0,108.0,141.0,35.0,66.0,87.0,16.0,29.0,1.0,65.0,233.0,66.0,184.0,100.0,158.0,49.0,169.0,231.0,115.0,236.0,95.0,53.0,65.0,238.0,70.0,229.0,73.0,203.0,153.0,232.0,201.0,60.0,234.0,184.0,180.0,161.0,119.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt44",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[215.0,80.0,141.0,31.0,57.0,137.0,150.0,20.0,44.0,88.0,237.0,231.0,148.0,74.0,71.0,189.0,3.0,89.0,144.0,129.0,93.0,74.0,253.0,220.0,252.0,15.0,21.0,150.0,30.0,133.0,73.0,166.0,114.0,40.0,119.0,125.0,115.0,164.0,178.0,152.0,252.0,87.0,158.0,122.0,169.0,199.0,186.0,148.0,96.0,13.0,108.0,53.0,0.0,87.0,43.0,133.0,97.0,185.0,131.0,55.0,249.0,178.0,194.0,115.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt44",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[215.0,80.0,141.0,31.0,57.0,137.0,150.0,20.0,44.0,88.0,237.0,231.0,148.0,74.0,71.0,189.0,3.0,89.0,144.0,129.0,93.0,74.0,253.0,220.0,252.0,15.0,21.0,150.0,30.0,133.0,73.0,166.0,114.0,40.0,119.0,125.0,115.0,164.0,178.0,152.0,252.0,87.0,158.0,122.0,169.0,199.0,186.0,148.0,96.0,13.0,108.0,53.0,0.0,87.0,43.0,133.0,97.0,185.0,131.0,55.0,249.0,178.0,194.0,115.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt45",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[250.0,96.0,111.0,9.0,240.0,49.0,136.0,10.0,171.0,243.0,196.0,64.0,66.0,252.0,248.0,105.0,47.0,194.0,32.0,132.0,74.0,14.0,154.0,38.0,80.0,186.0,197.0,208.0,232.0,80.0,126.0,177.0,44.0,153.0,253.0,199.0,160.0,162.0,79.0,132.0,223.0,160.0,144.0,65.0,174.0,179.0,188.0,20.0,60.0,56.0,105.0,242.0,128.0,189.0,172.0,16.0,50.0,118.0,82.0,243.0,196.0,195.0,20.0,129.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt45",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[250.0,96.0,111.0,9.0,240.0,49.0,136.0,10.0,171.0,243.0,196.0,64.0,66.0,252.0,248.0,105.0,47.0,194.0,32.0,132.0,74.0,14.0,154.0,38.0,80.0,186.0,197.0,208.0,232.0,80.0,126.0,177.0,44.0,153.0,253.0,199.0,160.0,162.0,79.0,132.0,223.0,160.0,144.0,65.0,174.0,179.0,188.0,20.0,60.0,56.0,105.0,242.0,128.0,189.0,172.0,16.0,50.0,118.0,82.0,243.0,196.0,195.0,20.0,129.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt46",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[21.0,146.0,29.0,146.0,90.0,204.0,125.0,37.0,49.0,180.0,209.0,36.0,71.0,92.0,243.0,183.0,10.0,69.0,47.0,55.0,232.0,122.0,84.0,164.0,132.0,137.0,246.0,195.0,104.0,140.0,86.0,251.0,98.0,69.0,126.0,77.0,192.0,35.0,13.0,251.0,182.0,213.0,23.0,98.0,136.0,132.0,211.0,163.0,166.0,148.0,74.0,123.0,153.0,183.0,176.0,123.0,7.0,217.0,26.0,164.0,201.0,171.0,83.0,195.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt46",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[21.0,146.0,29.0,146.0,90.0,204.0,125.0,37.0,49.0,180.0,209.0,36.0,71.0,92.0,243.0,183.0,10.0,69.0,47.0,55.0,232.0,122.0,84.0,164.0,132.0,137.0,246.0,195.0,104.0,140.0,86.0,251.0,98.0,69.0,126.0,77.0,192.0,35.0,13.0,251.0,182.0,213.0,23.0,98.0,136.0,132.0,211.0,163.0,166.0,148.0,74.0,123.0,153.0,183.0,176.0,123.0,7.0,217.0,26.0,164.0,201.0,171.0,83.0,195.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt47",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[10.0,38.0,111.0,164.0,11.0,202.0,7.0,249.0,180.0,219.0,32.0,200.0,40.0,143.0,132.0,244.0,71.0,111.0,78.0,163.0,253.0,31.0,27.0,57.0,106.0,223.0,0.0,76.0,54.0,229.0,61.0,187.0,120.0,60.0,228.0,36.0,11.0,113.0,0.0,50.0,205.0,79.0,27.0,247.0,18.0,160.0,143.0,243.0,206.0,90.0,147.0,116.0,125.0,13.0,1.0,46.0,70.0,217.0,4.0,216.0,203.0,206.0,74.0,181.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt47",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[10.0,38.0,111.0,164.0,11.0,202.0,7.0,249.0,180.0,219.0,32.0,200.0,40.0,143.0,132.0,244.0,71.0,111.0,78.0,163.0,253.0,31.0,27.0,57.0,106.0,223.0,0.0,76.0,54.0,229.0,61.0,187.0,120.0,60.0,228.0,36.0,11.0,113.0,0.0,50.0,205.0,79.0,27.0,247.0,18.0,160.0,143.0,243.0,206.0,90.0,147.0,116.0,125.0,13.0,1.0,46.0,70.0,217.0,4.0,216.0,203.0,206.0,74.0,181.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt48",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[4.0,221.0,3.0,130.0,104.0,6.0,104.0,156.0,164.0,192.0,100.0,164.0,45.0,22.0,225.0,181.0,102.0,20.0,200.0,106.0,190.0,104.0,122.0,5.0,37.0,204.0,0.0,123.0,227.0,153.0,198.0,242.0,98.0,45.0,139.0,5.0,126.0,13.0,202.0,144.0,191.0,9.0,252.0,201.0,63.0,8.0,248.0,41.0,33.0,18.0,242.0,226.0,85.0,204.0,100.0,202.0,202.0,164.0,177.0,202.0,209.0,47.0,126.0,124.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt48",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[4.0,221.0,3.0,130.0,104.0,6.0,104.0,156.0,164.0,192.0,100.0,164.0,45.0,22.0,225.0,181.0,102.0,20.0,200.0,106.0,190.0,104.0,122.0,5.0,37.0,204.0,0.0,123.0,227.0,153.0,198.0,242.0,98.0,45.0,139.0,5.0,126.0,13.0,202.0,144.0,191.0,9.0,252.0,201.0,63.0,8.0,248.0,41.0,33.0,18.0,242.0,226.0,85.0,204.0,100.0,202.0,202.0,164.0,177.0,202.0,209.0,47.0,126.0,124.0]});
    });
    test('crypto.pbkdf2Sync("seg-2023","salt49",1000.0,64.0,"sha512") should returns {"type":"Buffer","data":[90.0,214.0,115.0,179.0,165.0,59.0,232.0,227.0,81.0,6.0,205.0,154.0,105.0,193.0,48.0,166.0,165.0,16.0,231.0,13.0,157.0,134.0,87.0,252.0,36.0,17.0,161.0,197.0,169.0,1.0,255.0,175.0,219.0,14.0,61.0,150.0,200.0,19.0,210.0,236.0,31.0,193.0,138.0,120.0,170.0,0.0,177.0,253.0,227.0,217.0,203.0,220.0,96.0,24.0,39.0,20.0,189.0,45.0,200.0,210.0,54.0,205.0,166.0,245.0]}', () => {
        const crypto = require('crypto');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');
        hash = crypto.pbkdf2Sync('seg-2023', 'salt' + i, 1000, 64, 'sha512');

        expect(crypto.pbkdf2Sync("seg-2023","salt49",1000.0,64.0,"sha512").toJSON()).toMatchObject({"type":"Buffer","data":[90.0,214.0,115.0,179.0,165.0,59.0,232.0,227.0,81.0,6.0,205.0,154.0,105.0,193.0,48.0,166.0,165.0,16.0,231.0,13.0,157.0,134.0,87.0,252.0,36.0,17.0,161.0,197.0,169.0,1.0,255.0,175.0,219.0,14.0,61.0,150.0,200.0,19.0,210.0,236.0,31.0,193.0,138.0,120.0,170.0,0.0,177.0,253.0,227.0,217.0,203.0,220.0,96.0,24.0,39.0,20.0,189.0,45.0,200.0,210.0,54.0,205.0,166.0,245.0]});
    });
});